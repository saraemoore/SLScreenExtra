% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rf.R
\name{screen.ranger}
\alias{screen.ranger}
\title{Screen features via a fast implementation of Random Forest}
\usage{
screen.ranger(
  Y,
  X,
  family,
  selector = c("cutoff.biggest.diff", "cutoff.k", "cutoff.k.percent"),
  k = switch(selector, cutoff.k = ceiling(0.5 * ncol(X)), cutoff.k.percent = 0.5, NULL),
  nTree = 1000,
  mTry = ifelse(family$family == "gaussian", floor(sqrt(ncol(X))), max(floor(ncol(X)/3),
    1)),
  nodeSize = ifelse(family$family == "gaussian", 5, 1),
  importanceType = c("permutation", "impurity"),
  scalePermutationImportance = TRUE,
  probabilityTrees = FALSE,
  numThreads = 1,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{Y}{Outcome (numeric vector). See \code{\link[SuperLearner]{SuperLearner}}
for specifics.}

\item{X}{Predictor variable(s) (data.frame or matrix). See
\code{\link[SuperLearner]{SuperLearner}} for specifics.}

\item{family}{Error distribution to be used in the model:
\code{\link[stats]{gaussian}} or \code{\link[stats]{binomial}}.
Currently unused. See \code{\link[SuperLearner]{SuperLearner}}
for specifics.}

\item{selector}{A string corresponding to a subset selecting function
implemented in the FSelector package. One of:
\code{\link[FSelector]{cutoff.biggest.diff}} (default),
\code{\link[FSelector]{cutoff.k}}, or
\code{\link[FSelector]{cutoff.k.percent}}.}

\item{k}{Passed through to the \code{selector} in the case where \code{selector} is
\code{\link[FSelector]{cutoff.k}} or \code{\link[FSelector]{cutoff.k.percent}}.
Otherwise, should remain NULL (the default). For \code{\link[FSelector]{cutoff.k}},
this is an integer indicating the number of features to keep from \code{X}.
For \code{\link[FSelector]{cutoff.k.percent}}, this is instead the proportion
of features to keep.}

\item{nTree}{Integer. Number of trees. Default: 1000.}

\item{mTry}{Integer. Number of columns of \code{X} sampled at each split.
Default: square root (\code{gaussian()} family) or one third
(\code{binomial()} family) of total number of features, rounded down.}

\item{nodeSize}{Integer. Minimum number of observations in terminal nodes.
Default: 5 (\code{gaussian()} family) or 1 (\code{binomial()} family).}

\item{importanceType}{Importance type. \code{"permutation"} (default) indicates
mean decrease in accuracy (for \code{binomial()} family) or percent increase
in mean squared error (for \code{gaussian()} family) when comparing
predictions using the original variable versus a permuted version of the
variable (column of \code{X}). \code{"impurity"} indicates increase in
node purity achieved by splitting on that column of \code{X} (for
\code{binomial()} family, measured by Gini index; for \code{gaussian()},
measured by variance of the responses). See
\code{\link[ranger]{ranger}} for more details.}

\item{scalePermutationImportance}{Scale permutation importance by standard
error. Ignored if \code{importanceType = "impurity"}. See
\code{\link[ranger]{ranger}} for more details.}

\item{probabilityTrees}{Logical. If family is \code{binomial()} and
\code{probabilityTrees} is FALSE (the default), classification trees are
grown. If family is \code{binomial()} and
\code{probabilityTrees} is TRUE (the default), probability trees are
grown (Malley et al., 2012). Ignored if family is \code{gaussian()}, for
which regression trees are always grown. See \code{\link[ranger]{ranger}}
for more details.}

\item{numThreads}{Number of threads. Default: 1.}

\item{verbose}{Should debugging messages be printed? Default: \code{FALSE}.}

\item{...}{Currently unused.}
}
\value{
A logical vector with length equal to \code{ncol(X)}.
}
\description{
Speed up \code{\link[SuperLearner]{screen.randomForest}} or
\code{\link{screen.randomForest.imp}}. Uses the
\code{\link[FSelector]{cutoff}} selectors.
}
\examples{
data(iris)
Y <- as.numeric(iris$Species=="setosa")
X <- iris[,-which(colnames(iris)=="Species")]
screen.ranger(Y, X, binomial(), selector = "cutoff.k.percent", k = 0.75)

data(mtcars)
Y <- mtcars$mpg
X <- mtcars[,-which(colnames(mtcars)=="mpg")]
screen.ranger(Y, X, gaussian(), importanceType = "impurity")

# based on examples in SuperLearner package
set.seed(1)
n <- 100
p <- 20
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
X <- data.frame(X)
Y <- X[, 1] + sqrt(abs(X[, 2] * X[, 3])) + X[, 2] - X[, 3] + rnorm(n)

library(SuperLearner)
sl = SuperLearner(Y, X, family = gaussian(), cvControl = list(V = 2),
                  SL.library = list(c("SL.glm", "All"),
                                    c("SL.glm", "screen.ranger")))
sl
sl$whichScreen
}
\references{
\url{http://dx.doi.org/10.18637/jss.v077.i01}
\url{http://dx.doi.org/10.1023/A:1010933404324}
\url{http://dx.doi.org/10.3414/ME00-01-0052}
}
